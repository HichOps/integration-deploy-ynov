---
- name: Déployer API Node.js sur VM Ubuntu et installer Promtail
  hosts: all
  become: yes
  vars:
    app_user: ubuntu
    app_dir: /home/ubuntu/integration-deploy-ynov
    repo_url: https://github.com/HichOps/integration-deploy-ynov.git
    node_version: "18"
    api_port: 5000 # Assurez-vous que cette variable est bien définie
    pm2_ecosystem_file_dest: "{{ app_dir }}/ecosystem.config.js" # Chemin de destination pour le fichier ecosystem

  tasks:
    - name: Mettre à jour la liste des paquets et faire un upgrade
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600

    - name: Installer dépendances de base
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - git
          - build-essential
          - unzip
          - software-properties-common
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Ajouter la clé GPG NodeSource
      ansible.builtin.apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Ajouter le repository NodeSource pour Node.js {{ node_version }}
      ansible.builtin.apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes # Mettre à jour le cache ici directement

    - name: Installer Node.js
      ansible.builtin.apt:
        name: nodejs
        state: present

    - name: Vérifier la version de Node.js installée
      ansible.builtin.command: node --version
      register: node_version_check
      changed_when: false

    - name: Afficher la version de Node.js
      ansible.builtin.debug:
        msg: "Version Node.js installée: {{ node_version_check.stdout }}"

    - name: Installer SQLite3
      ansible.builtin.apt:
        name: sqlite3
        state: present

    - name: Installer PM2 globalement via npm
      ansible.builtin.npm:
        name: pm2
        global: yes
        state: present

    - name: Vérifier si le répertoire de l'application existe
      ansible.builtin.stat:
        path: "{{ app_dir }}"
      register: app_dir_stat

    - name: Supprimer l'ancien répertoire s'il existe (pour un clonage propre)
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: absent
      when: app_dir_stat.stat.exists
      # become_user: "{{ app_user }}" # Pas besoin si la tâche parente a déjà become: yes et que l'utilisateur a les droits

    - name: Cloner le repository de l'API
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        force: yes # Force le clonage, utile si le répertoire n'est pas vide pour une raison quelconque
        update: yes # Pull les derniers changements si le repo existe déjà (ne sera pas le cas avec la suppression ci-dessus)
        version: main
      become_user: "{{ app_user }}"

    - name: Installer les dépendances npm de l'API
      ansible.builtin.npm:
        path: "{{ app_dir }}/api/backend" # Assurez-vous que c'est le bon chemin vers package.json
        state: present
      become_user: "{{ app_user }}"

    - name: Exécuter les migrations Sequelize
      ansible.builtin.command: npx sequelize-cli db:migrate
      args:
        chdir: "{{ app_dir }}/api/backend"
      become_user: "{{ app_user }}"
      # ignore_errors: yes # Soyez prudent avec cela en production, gérez les erreurs de migration

    # --- MODIFICATIONS POUR PM2 ---
    - name: Créer le répertoire pour les logs de l'application PM2 (si ecosystem file les utilise)
      ansible.builtin.file:
        path: "{{ app_dir }}/logs" # Ou /var/log/app si vous préférez
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      when: false # Activez cette tâche si votre ecosystem.config.js.j2 définit des error_file/out_file

    - name: Copier le fichier de configuration PM2 (ecosystem.config.js.j2) sur le serveur
      ansible.builtin.template:
        src: ecosystem.config.js.j2 # Chemin vers votre template dans votre projet Ansible (ex: ./templates/ecosystem.config.js.j2 ou juste ecosystem.config.js.j2 si à la racine)
        dest: "{{ pm2_ecosystem_file_dest }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      become_user: "{{ app_user }}" # Copier en tant qu'utilisateur de l'application

    - name: Démarrer ou redémarrer l'application backend avec PM2 via ecosystem file
      ansible.builtin.command: pm2 startOrRestart {{ pm2_ecosystem_file_dest }} # Utilise le fichier copié
      become_user: "{{ app_user }}"
      environment: # PM2 a parfois besoin de HOME pour trouver son répertoire .pm2
        HOME: "/home/{{ app_user }}"
        PM2_HOME: "/home/{{ app_user }}/.pm2" # Explicitement définir PM2_HOME peut aider
      # Vous pouvez ajouter --env production ici si votre ecosystem file a des sections env_production
      # command: pm2 startOrRestart {{ pm2_ecosystem_file_dest }} --env production

    - name: Sauvegarder la configuration PM2 pour un redémarrage automatique au boot
      ansible.builtin.command: pm2 save
      become_user: "{{ app_user }}"
      environment:
        HOME: "/home/{{ app_user }}"
        PM2_HOME: "/home/{{ app_user }}/.pm2"

    - name: Configurer PM2 pour démarrer au boot du système (systemd)
      ansible.builtin.command: pm2 startup systemd -u {{ app_user }} --hp /home/{{ app_user }}
      # become: yes # La tâche parente a déjà become: yes. Cette commande spécifique est exécutée en tant que root pour configurer systemd.
      register: pm2_startup_output
      changed_when: "'systemd detected' in pm2_startup_output.stdout or 'Successfully set up' in pm2_startup_output.stdout or 'already setup' in pm2_startup_output.stdout or 'command already C/Ped' in pm2_startup_output.stdout"
      failed_when: pm2_startup_output.rc != 0 and not ('command already C/Ped' in pm2_startup_output.stdout or 'already setup' in pm2_startup_output.stdout)
      # Cette commande peut retourner un code de sortie non nul même si elle a fonctionné (ex: si déjà configuré)
      # Elle peut aussi afficher une commande à copier/coller. Pour une automatisation complète,
      # il faudrait capturer cette commande et l'exécuter, mais c'est plus complexe.
      # La ligne ci-dessus tente une configuration directe.

    # --- FIN DES MODIFICATIONS PM2 ---

    # Vos tâches d'installation et configuration de Promtail (inchangées)
    - name: Créer le répertoire pour Promtail
      ansible.builtin.file:
        path: /opt/promtail
        state: directory
        mode: '0755'

    - name: Télécharger Promtail
      ansible.builtin.get_url:
        url: https://github.com/grafana/loki/releases/download/v2.9.0/promtail-linux-amd64.zip
        dest: /tmp/promtail.zip
        mode: '0644'

    - name: Extraire Promtail
      ansible.builtin.unarchive:
        src: /tmp/promtail.zip
        dest: /opt/promtail
        remote_src: yes
        creates: /opt/promtail/promtail-linux-amd64 # Évite de ré-extraire si déjà fait

    - name: Rendre Promtail exécutable
      ansible.builtin.file:
        path: /opt/promtail/promtail-linux-amd64
        mode: '0755'

    - name: Créer un lien symbolique pour Promtail
      ansible.builtin.file:
        src: /opt/promtail/promtail-linux-amd64
        dest: /usr/local/bin/promtail
        state: link
        force: yes # Recrée le lien si nécessaire

    - name: Créer le répertoire de configuration Promtail
      ansible.builtin.file:
        path: /etc/promtail
        state: directory
        mode: '0755'

    - name: Créer la configuration Promtail
      ansible.builtin.copy:
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: /tmp/positions.yaml

          clients:
            - url: http://localhost:3100/loki/api/v1/push

          scrape_configs:
            - job_name: system
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: varlogs
                    __path__: /var/log/*log

            - job_name: app-logs # Pour les logs PM2 si vous les redirigez
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: app
                    __path__: "{{ app_dir }}/logs/*.log" # Ou /var/log/app/*.log selon votre config PM2
              # Assurez-vous que ce chemin correspond à ce que PM2 génère ou à ce que vous avez configuré dans ecosystem.config.js.j2
              # Par défaut, les logs PM2 sont dans /home/ubuntu/.pm2/logs/
              # Pour les capturer, vous pourriez avoir besoin de :
              # __path__: "/home/{{ app_user }}/.pm2/logs/api-backend*.log"

            # Cette section est bonne si vous avez configuré PM2 pour écrire dans /var/log/app/
            - job_name: nodejs-app 
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: nodejs
                    app: api-backend # Doit correspondre au nom dans ecosystem.config.js.j2
                    __path__: "/home/{{ app_user }}/.pm2/logs/api-backend*.log" # Chemin par défaut des logs PM2
                    # Ou si vous avez des logs personnalisés dans ecosystem.config.js.j2 :
                    # __path__: "{{ app_dir }}/logs/api-*.log"
        dest: /etc/promtail/config.yml
        mode: '0644'
      notify: Restart Promtail # Notifie un handler pour redémarrer Promtail si la config change

    - name: Créer le service systemd pour Promtail
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Promtail service
          After=network.target

          [Service]
          Type=simple
          User=root # Promtail a besoin de lire des logs qui peuvent nécessiter root
          ExecStart=/usr/local/bin/promtail -config.file /etc/promtail/config.yml
          Restart=on-failure
          RestartSec=20
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=promtail

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/promtail.service
        mode: '0644'
      notify: Restart Promtail

    - name: Recharger systemd (toujours exécuté pour s'assurer que les changements de service sont pris en compte)
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Démarrer et activer Promtail
      ansible.builtin.systemd:
        name: promtail
        state: started
        enabled: yes

    - name: Vérifier le statut de l'API
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ api_port }}/api/lamps" # Testez une route valide
        method: GET
        timeout: 10
      register: api_status
      retries: 5
      delay: 10
      # ignore_errors: yes # Enlevez pour que le playbook échoue si l'API n'est pas joignable

    - name: Afficher le statut de l'API
      ansible.builtin.debug:
        msg: |
          API Status: {{ api_status.status | default('ERREUR - Vérifiez les logs PM2') }}
          URL de l'API testée: http://{{ ansible_default_ipv4.address }}:{{ api_port }}/api/lamps
          Logs de l'application (PM2): pm2 logs api-backend (ou /home/{{ app_user }}/.pm2/logs/)
          Commandes utiles:
            - pm2 list (vérifier les processus)
            - pm2 logs api-backend (voir les logs)
            - pm2 restart api-backend (redémarrer l'app)
            - systemctl status promtail (vérifier Promtail)

    - name: Afficher les informations finales
      ansible.builtin.debug:
        msg: |
          🚀 Déploiement terminé !
          
          Application API (gérée par PM2 sous le nom 'api-backend'):
          - URL: http://{{ ansible_default_ipv4.address }}:{{ api_port }}
          - Répertoire: {{ app_dir }}
          - Logs PM2: /home/{{ app_user }}/.pm2/logs/api-backend* ou utilisez 'pm2 logs api-backend'
          
          Promtail:
          - Configuration: /etc/promtail/config.yml
          - Service: systemctl status promtail
          
          Commandes utiles sur le serveur:
          - pm2 list
          - pm2 logs api-backend
          - pm2 monit
          
          Test de l'API (exemple):
          - curl http://{{ ansible_default_ipv4.address }}:{{ api_port }}/api/lamps

  handlers:
    - name: Restart Promtail
      ansible.builtin.systemd:
        name: promtail
        state: restarted