---
- name: D√©ployer API Node.js sur VM Ubuntu et installer Promtail
  hosts: all
  become: yes
  vars:
    app_user: ubuntu
    app_dir: /home/ubuntu/integration-deploy-ynov
    repo_url: https://github.com/HichOps/integration-deploy-ynov.git
    node_version: "18"
    api_port: 5000
    
  tasks:
    - name: Mettre √† jour la liste des paquets et faire un upgrade
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600

    - name: Installer d√©pendances de base
      apt:
        name:
          - curl
          - wget
          - git
          - build-essential
          - unzip
          - software-properties-common
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Ajouter la cl√© GPG NodeSource
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Ajouter le repository NodeSource pour Node.js {{ node_version }}
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main"
        state: present

    - name: Mettre √† jour le cache apt apr√®s ajout du repo NodeSource
      apt:
        update_cache: yes

    - name: Installer Node.js
      apt:
        name: nodejs
        state: present

    - name: V√©rifier la version de Node.js install√©e
      command: node --version
      register: node_version_check
      changed_when: false

    - name: Afficher la version de Node.js
      debug:
        msg: "Version Node.js install√©e: {{ node_version_check.stdout }}"

    - name: Installer SQLite3
      apt:
        name: sqlite3
        state: present

    - name: Installer PM2 globalement via npm
      npm:
        name: pm2
        global: yes
        state: present

    - name: V√©rifier si le r√©pertoire de l'application existe
      stat:
        path: "{{ app_dir }}"
      register: app_dir_stat

    - name: Supprimer l'ancien r√©pertoire s'il existe
      file:
        path: "{{ app_dir }}"
        state: absent
      when: app_dir_stat.stat.exists
      become_user: "{{ app_user }}"

    - name: Cloner le repository de l'API
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        force: yes
        update: yes
        version: main
      become_user: "{{ app_user }}"

    - name: Installer les d√©pendances npm de l'API
      npm:
        path: "{{ app_dir }}/api"
        state: present
      become_user: "{{ app_user }}"

    - name: Cr√©er le r√©pertoire pour les logs de l'application
      file:
        path: /var/log/app
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Cr√©er un fichier de configuration PM2
      copy:
        content: |
          module.exports = {
            apps: [{
              name: 'api-tp-filrouge',
              script: './api/server.js',
              cwd: '{{ app_dir }}',
              instances: 1,
              autorestart: true,
              watch: false,
              max_memory_restart: '1G',
              env: {
                NODE_ENV: 'production',
                PORT: {{ api_port }}
              },
              error_file: '/var/log/app/api-error.log',
              out_file: '/var/log/app/api-out.log',
              log_file: '/var/log/app/api-combined.log',
              time: true
            }]
          };
        dest: "{{ app_dir }}/ecosystem.config.js"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      become_user: "{{ app_user }}"

    - name: Arr√™ter l'application PM2 existante (si elle existe)
      command: pm2 stop api-tp-filrouge
      become_user: "{{ app_user }}"
      ignore_errors: yes

    - name: Supprimer l'application PM2 existante (si elle existe)
      command: pm2 delete api-tp-filrouge
      become_user: "{{ app_user }}"
      ignore_errors: yes

    - name: D√©marrer l'application avec PM2
      command: pm2 start ecosystem.config.js
      args:
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"

    - name: Sauvegarder la configuration PM2
      command: pm2 save
      become_user: "{{ app_user }}"

    - name: Configurer PM2 pour d√©marrer au boot
      command: pm2 startup systemd
      become_user: "{{ app_user }}"
      register: pm2_startup
      ignore_errors: yes

    - name: Ex√©cuter la commande de startup PM2 (si n√©cessaire)
      shell: "{{ pm2_startup.stdout_lines[-1] }}"
      when: pm2_startup.stdout_lines is defined and pm2_startup.stdout_lines|length > 0
      ignore_errors: yes

    # Installation et configuration de Promtail
    - name: Cr√©er le r√©pertoire pour Promtail
      file:
        path: /opt/promtail
        state: directory
        mode: '0755'

    - name: T√©l√©charger Promtail
      get_url:
        url: https://github.com/grafana/loki/releases/download/v2.9.0/promtail-linux-amd64.zip
        dest: /tmp/promtail.zip
        mode: '0644'

    - name: Extraire Promtail
      unarchive:
        src: /tmp/promtail.zip
        dest: /opt/promtail
        remote_src: yes
        creates: /opt/promtail/promtail-linux-amd64

    - name: Rendre Promtail ex√©cutable
      file:
        path: /opt/promtail/promtail-linux-amd64
        mode: '0755'

    - name: Cr√©er un lien symbolique pour Promtail
      file:
        src: /opt/promtail/promtail-linux-amd64
        dest: /usr/local/bin/promtail
        state: link

    - name: Cr√©er le r√©pertoire de configuration Promtail
      file:
        path: /etc/promtail
        state: directory
        mode: '0755'

    - name: Cr√©er la configuration Promtail
      copy:
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: /tmp/positions.yaml

          clients:
            - url: http://localhost:3100/loki/api/v1/push

          scrape_configs:
            - job_name: system
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: varlogs
                    __path__: /var/log/*log

            - job_name: app-logs
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: app
                    __path__: /var/log/app/*.log

            - job_name: nodejs-app
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: nodejs
                    app: api-tp-filrouge
                    __path__: /var/log/app/api-*.log
        dest: /etc/promtail/config.yml
        mode: '0644'

    - name: Cr√©er le service systemd pour Promtail
      copy:
        content: |
          [Unit]
          Description=Promtail service
          After=network.target

          [Service]
          Type=simple
          User=root
          ExecStart=/usr/local/bin/promtail -config.file /etc/promtail/config.yml
          Restart=on-failure
          RestartSec=20
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=promtail

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/promtail.service
        mode: '0644'

    - name: Recharger systemd
      systemd:
        daemon_reload: yes

    - name: D√©marrer et activer Promtail
      systemd:
        name: promtail
        state: started
        enabled: yes

    - name: V√©rifier le statut de l'API
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ api_port }}"
        method: GET
        timeout: 10
      register: api_status
      retries: 5
      delay: 10
      ignore_errors: yes

    - name: Afficher le statut de l'API
      debug:
        msg: |
          API Status: {{ api_status.status | default('ERREUR') }}
          URL de l'API: http://{{ ansible_default_ipv4.address }}:{{ api_port }}
          Logs de l'application: /var/log/app/
          Commandes utiles:
            - pm2 status (v√©rifier les processus)
            - pm2 logs api-tp-filrouge (voir les logs)
            - pm2 restart api-tp-filrouge (red√©marrer l'app)
            - systemctl status promtail (v√©rifier Promtail)

    - name: Afficher les informations finales
      debug:
        msg: |
          üöÄ D√©ploiement termin√© !
          
          Application API:
          - URL: http://{{ ansible_default_ipv4.address }}:{{ api_port }}
          - R√©pertoire: {{ app_dir }}
          - Logs: /var/log/app/
          
          Promtail:
          - Configuration: /etc/promtail/config.yml
          - Service: systemctl status promtail
          
          Commandes utiles:
          - pm2 status
          - pm2 logs api-tp-filrouge
          - pm2 monit
          
          Test de l'API:
          - curl http://{{ ansible_default_ipv4.address }}:{{ api_port }}