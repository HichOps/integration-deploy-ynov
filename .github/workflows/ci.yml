name: CI/CD Flutter & Node.js

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Jobs de setup
  setup-flutter:
    name: Setup Flutter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      - run: cd api/mobile && flutter pub get
      - uses: actions/cache@v4
        with:
          path: api/mobile/.dart_tool/
          key: flutter-${{ hashFiles('api/mobile/pubspec.lock') }}

  setup-node:
    name: Setup Node.js
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: api/backend/package-lock.json
      - run: cd api/backend && npm install

  # Jobs de test
  test-backend:
    name: Test Backend
    needs: setup-node
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: api/backend/package-lock.json
      - run: cd api/backend && npm install
      - run: cd api/backend && node app/scripts/initDB.js
      - run: cd api/backend && npm run test

  test-flutter:
    name: Test Flutter
    needs: setup-flutter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      - uses: actions/cache@v4
        with:
          path: api/mobile/.dart_tool/
          key: flutter-${{ hashFiles('api/mobile/pubspec.lock') }}
      - run: cd api/mobile && flutter test

  # Jobs de lint
  lint-backend:
    name: Lint Backend
    needs: setup-node
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          cache-dependency-path: api/backend/package-lock.json
      - run: cd api/backend && npm install
      - run: cd api/backend && npm run format
      - run: cd api/backend && npm run lint || true

  lint-flutter:
    name: Lint Flutter
    needs: setup-flutter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      - uses: actions/cache@v4
        with:
          path: api/mobile/.dart_tool/
          key: flutter-${{ hashFiles('api/mobile/pubspec.lock') }}
      - run: cd api/mobile && flutter analyze

  # Jobs de build
  build-backend:
    name: Build Backend
    needs: [test-backend, lint-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '23'
      - run: cd api/backend && npm ci --production
      - uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: api/backend/

  build-android:
    name: Build Android App
    needs: [test-flutter, lint-flutter]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      - uses: actions/cache@v4
        with:
          path: api/mobile/.dart_tool/
          key: flutter-${{ hashFiles('api/mobile/pubspec.lock') }}
      - run: cd api/mobile && flutter build apk --release
      - uses: actions/upload-artifact@v4
        with:
          name: android-app-release
          path: api/mobile/build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    name: Build iOS App
    needs: [test-flutter, lint-flutter]
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
      - uses: actions/cache@v4
        with:
          path: api/mobile/.dart_tool/
          key: flutter-${{ hashFiles('api/mobile/pubspec.lock') }}
      - run: cd api/mobile && flutter build ios --release --no-codesign
      - uses: actions/upload-artifact@v4
        with:
          name: ios-app-release
          path: api/mobile/build/ios/iphoneos

  deploy-to-gcp:
    name: Deploy Backend to GCP VM
    needs: [build-backend]  # Attend que le build backend soit terminé
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Seulement sur la branche main
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: ./backend-build/
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VM
      run: |
        # Créer le répertoire de déploiement sur la VM
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.VM_IP }} "mkdir -p /home/ubuntu/app/backend"
        
        # Copier les fichiers du backend
        scp -i ~/.ssh/id_rsa -r ./backend-build/* ubuntu@${{ secrets.VM_IP }}:/home/ubuntu/app/backend/
        
        # Copier le fichier de config Promtail si il existe
        if [ -f ./promtail-config.yaml ]; then
          scp -i ~/.ssh/id_rsa ./promtail-config.yaml ubuntu@${{ secrets.VM_IP }}:/home/ubuntu/app/
        fi
        
        # Déployer sur la VM
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.VM_IP }} << 'EOF'
          # Mettre à jour le système
          sudo apt update
          
          # Installer Node.js 22 si pas déjà installé
          if ! node --version 2>/dev/null | grep -q "v22"; then
            curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Aller dans le répertoire de l'app
          cd /home/ubuntu/app/backend
          
          # Installer les dépendances de production
          npm ci --production
          
          # Initialiser la base de données
          node app/scripts/initDB.js
          
          # Arrêter l'ancien processus s'il existe
          pkill -f "node.*app.js" || true
          
          # Installer PM2 globalement pour la gestion des processus
          sudo npm install -g pm2
          
          # Démarrer l'application avec PM2
          pm2 delete api-backend || true
          pm2 start app.js --name api-backend
          pm2 save
          pm2 startup | grep "sudo" | bash || true
        EOF
        
    - name: Health Check
      run: |
        # Attendre que l'application démarre
        sleep 15
        
        # Tester l'endpoint de santé
        for i in {1..5}; do
          if curl -f http://${{ secrets.VM_IP }}:3000/health; then
            echo "✅ Deployment successful!"
            exit 0
          fi
          echo "⏳ Waiting for app to start... (attempt $i/5)"
          sleep 10
        done
        
        echo "❌ Deployment failed - health check timeout"
        exit 1